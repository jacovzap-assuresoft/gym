import org.junit.Test;
import org.mockito.Mockito;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertThat;

public class OpenTest
{
    @Test
    public void testConstructor()
    {
        Open open = new Open(6, 7);
        assertNotNull(open);
    }

    @Test
    public void testConstructorInstace()
    {
        Open open = new Open(6, 7);
        assertThat(open, instanceOf(Open.class));
    }

    @Test
    public void testGetMembers()
    {
        Open open = new Open(11, 12);
        Member firstMember = Mockito.mock(Member.class);
        Member secondMember = Mockito.mock(Member.class);

        open.addMember(firstMember);
        open.addMember(secondMember);

        assertEquals(2, open.getMembers().size());
    }

    @Test
    public void testCalculateTheAverageAgeOfMembers()
    {
        Open open = new Open(9, 10);
        Member firstMember = Mockito.mock(Member.class);
        Member secondMember = Mockito.mock(Member.class);

        Mockito.when(firstMember.getAge()).thenReturn(20);
        Mockito.when(secondMember.getAge()).thenReturn(30);

        open.addMember(firstMember);
        open.addMember(secondMember);

        assertEquals(25.0, open.calculateTheAverageAgeOfMembers(), 0.0);
    }

    @Test
    public void testAddMember()
    {
        Open open = new Open(7, 8);
        Member member = Mockito.mock(Member.class);

        open.addMember(member);

        assertEquals(1, open.getMembers().size());
    }
}
